@page "/TimeLine"
@using LinkClanBot3.Data
@inject LinkClanBot3Context DBContext

@using Microsoft.EntityFrameworkCore
@using System.Linq
@using MudBlazor.Services;

<PageTitle>ボイチャログ</PageTitle>

<MudText Typo="Typo.h1" Style="font-size:xx-large; font-weight:700">ボイチャログ</MudText>

<MudStack Spacing="3" Class="my-5">
	<MudText Typo="Typo.h2" Style="font-size:x-large; font-weight:500">直近参加記録(直近10件)</MudText>

	<MudText Typo="Typo.body1" Style="font-size:medium;">直近10件のボイスチャット参加記録です。</MudText>

	@if (TimeLines == null)
	{
		<p><em>Loading...</em></p>
	}
	else
	{
		<table class="table">
			<thead>
				<tr>
					<th>日時</th>
					<th>表示名</th>
					<th>移動前</th>
					<th>移動後</th>
					<th>状態</th>
				</tr>
			</thead>
			<tbody>
				@foreach (var item in TimeLines)
				{
					<tr>
						<td>@item.EventDate.ToLocalTime().ToShortDateString() @item.EventDate.ToLocalTime().ToLongTimeString()</td>
						<td>@item.MemberData.DiscordName</td>
						<td>@item.before_channel_name</td>
						<td>@item.after_channel_name</td>
						<td>@item.EnteringRoom</td>
					</tr>
				}
			</tbody>
		</table>
	}
</MudStack>


<MudStack Spacing="3" Class="my-10">
	<MudText Typo="Typo.h2" Style="font-size:x-large; font-weight:500">曜日別の参加時間(一週間あたりの１人の参加時間)</MudText>

	<MudPaper Class="doc-section-component-container  d-flex flex-grow-1 flex-wrap justify-center align-center">
		<MudChart
			ChartType="ChartType.Bar" ChartSeries="@getJoinTimeWithWeeks(4)" 
			@bind-SelectedIndex="_weekTimeLineIndex" XAxisLabels="@getWeeks()" 
			Height="350px" Width="600px"
			AxisChartOptions="_weekTimeLineAxisChartOptions" ChartOptions="_weekChartOptions">
		</MudChart>
	</MudPaper>
</MudStack>

<MudStack Spacing="3" Class="my-10">
	<MudText Typo="Typo.h2" Style="font-size:x-large; font-weight:500">時間別の参加人数</MudText>

	<MudPaper Class="doc-section-component-container  d-flex flex-grow-1 flex-wrap justify-center align-center">
		<MudChart ChartType="ChartType.Bar" ChartSeries="@getJoinCountWithHour(12)"
				  @bind-SelectedIndex="_hourTimeLineIndex" XAxisLabels="@getHours()"
				  Height="350px" Width="800px"
				  AxisChartOptions="_hourTimeLineAxisChartOptions" ChartOptions="_hourChartOptions">
		</MudChart>
	</MudPaper>
</MudStack>




@code {
	private List<MemberTimeLine>? TimeLines;

	protected override async Task OnInitializedAsync()
	{
		TimeLines = DBContext.MemberTimeLine.Where(e => true).OrderByDescending(e=>e.EventDate).Take(10).Include(e => e.MemberData).ToList();
	}

	private int _weekTimeLineIndex = -1;
	private AxisChartOptions _weekTimeLineAxisChartOptions = new AxisChartOptions();
	private ChartOptions _weekChartOptions = new ChartOptions
	{
		YAxisTicks = 1,
	};

	public string[] getWeeks()
	{
		return new string[] { "月", "火", "水", "木", "金", "土", "日" };
	}

	private static List<List<double>> TransposeColumnsAndRows(List<List<double>> targetList)
	{
		var resultList = new List<List<double>>();

		foreach (var row in targetList.Select((v, i) => new { v, i }))
		{
			while (resultList.Count() < row.v.Count())
				resultList.Add(new List<double>());

			foreach (var col in row.v.Select((v, i) => new { v, i }))
			{
				while (row.i > resultList[col.i].Count())
					resultList[col.i].Add(0);

				resultList[col.i].Add(col.v);
			}
		}

		foreach (var row in resultList)
		{
			while (row.Count() < targetList.Count())
			{
				row.Add(0);
			}
		}

		return resultList;
	}


	public List<ChartSeries> getJoinTimeWithWeeks(int totalWeeks)
	{
		List<List<MemberTimeLine>> dayTimeLines = new();
		for (int i = 0; i < 7 * totalWeeks; i++)
		{
			dayTimeLines.Add(
				DBContext.MemberTimeLine
				.Where(e => e.EventDate.Date == DateTime.UtcNow.AddDays(-i).Date)
				.OrderBy(e => e.MemberData)
				.Take(10000)
				.ToList()
			);
		} 

		List<(DateTime, double)> days = new();
		List<ChartSeries> weekIndices = new List<ChartSeries>(7);
		foreach (var dayLine in dayTimeLines.Select((value, index) => new { index, value }))
		{
			double sum = 0.0;
			var startIndex = 0;
			foreach (var line in dayLine.value.Select((value, index) => new { index, value }))
			{
				if (line.value.EnteringRoom == EnteringRoom.Exit)
				{
					var startItem = dayLine.value.Skip(startIndex).Take(line.index - startIndex).FirstOrDefault(e => e.EnteringRoom == EnteringRoom.Entry && line.value.MemberID == e.MemberID);
					if (startItem != null)
					{
						// 退出があれば、退出時間と入室時間の差分を計算する
						sum += (line.value.EventDate - startItem.EventDate).TotalHours;
						startIndex = line.index;
					}
				}
			}
			// 1日あたりの１人の参加時間
			var memberCount = dayLine.value.DistinctBy(e => e.MemberID).Count();
			days.Add((DateTime.UtcNow.AddDays(-dayLine.index).Date, memberCount == 0 ? 0 : (Math.Round(sum / memberCount, 2))));
		}

		List<List<double>> DayOfWeekLines = new();
		for(int i = 0; i < 7; i++)
		{
			var daysWithSort = days.Where(e => (int)e.Item1.DayOfWeek == i).OrderByDescending(e => e.Item1);
			List<double> DayOfWeekLine = new();
			foreach (var day in daysWithSort)
			{
				DayOfWeekLine.Add(day.Item2);
			}
			DayOfWeekLines.Add(DayOfWeekLine);
		}

		var weekLines = TransposeColumnsAndRows(DayOfWeekLines);

		foreach (var week in weekLines.Select((value, index) => new { index, value }))
		{
			weekIndices.Add(new ChartSeries
			{
				Name = $"{week.index}週間目",
				Data = week.value.ToArray(),
			});
		}

		return weekIndices;
	}


	private int _hourTimeLineIndex = -1;
	private AxisChartOptions _hourTimeLineAxisChartOptions = new AxisChartOptions();

	private ChartOptions _hourChartOptions = new ChartOptions
	{
		YAxisTicks = 1,
	};

	public string[] getHours()
	{
		return Enumerable.Range(0, 24).Select(i => $"{i}h").ToArray();
	}

	public List<ChartSeries> getJoinCountWithHour(int totalDay)
	{
		List<List<MemberTimeLine>> daysTimeLines = new();
		for (int i = 0; i < totalDay; i++)
		{
			daysTimeLines.Add(
				DBContext.MemberTimeLine
				.Where(e => e.EventDate.Date == DateTime.UtcNow.AddDays(-i).Date)
				.OrderBy(e => e.MemberData)
				.Take(10000)
				.ToList()
			);
		}

		List<double> days = new();
		List<ChartSeries> dayIndices = new();		
		foreach (var day in daysTimeLines.Select((value, index) => new { index, value }))
		{
			List<double> hours = new();
			for (int i = 0; i < 24; i++)
			{
				var memberCount = day.value.Where(e => e.EventDate.ToLocalTime().Hour == i).DistinctBy(e => e.MemberID).Count();
				hours.Add(memberCount);
			}

			dayIndices.Add(new ChartSeries
			{
				Name = $"{day.index}日前",
				Data = hours.ToArray(),
			});

		}
		return dayIndices;
	}

}
